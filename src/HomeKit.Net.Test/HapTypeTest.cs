using System.Text;
using HomeKit.Net;

namespace HomeKit.NetTest;

public class HapTypeTest
{
    [Fact]
    public void TestJson()
    {
        var a =
            "{\"accessories\":[{\"aid\":1,\"services\":[{\"characteristics\":[{\"format\":\"bool\",\"iid\":2,\"perms\":[\"pw\"],\"type\":\"14\"},{\"format\":\"string\",\"iid\":3,\"perms\":[\"pr\"],\"type\":\"20\",\"value\":\"\"},{\"format\":\"string\",\"iid\":4,\"perms\":[\"pr\"],\"type\":\"21\",\"value\":\"\"},{\"format\":\"string\",\"iid\":5,\"perms\":[\"pr\"],\"type\":\"23\",\"value\":\"MyTempSensor\"},{\"format\":\"string\",\"iid\":6,\"perms\":[\"pr\"],\"type\":\"30\",\"value\":\"default\"},{\"format\":\"string\",\"iid\":7,\"perms\":[\"pr\"],\"type\":\"52\",\"value\":\"\"}],\"iid\":1,\"type\":\"3E\"},{\"characteristics\":[{\"format\":\"float\",\"iid\":9,\"maxValue\":1000,\"minStep\":0.1,\"minValue\":-273.1,\"perms\":[\"pr\",\"ev\"],\"type\":\"11\",\"unit\":\"celsius\",\"value\":0.0}],\"iid\":8,\"type\":\"8A\"}]}]}";
        var bytes = Encoding.UTF8.GetBytes(a);
        var pyBytes =
            "'123,34,97,99,99,101,115,115,111,114,105,101,115,34,58,91,123,34,97,105,100,34,58,49,44,34,115,101,114,118,105,99,101,115,34,58,91,123,34,99,104,97,114,97,99,116,101,114,105,115,116,105,99,115,34,58,91,123,34,102,111,114,109,97,116,34,58,34,98,111,111,108,34,44,34,105,105,100,34,58,50,44,34,112,101,114,109,115,34,58,91,34,112,119,34,93,44,34,116,121,112,101,34,58,34,49,52,34,125,44,123,34,102,111,114,109,97,116,34,58,34,115,116,114,105,110,103,34,44,34,105,105,100,34,58,51,44,34,112,101,114,109,115,34,58,91,34,112,114,34,93,44,34,116,121,112,101,34,58,34,50,48,34,44,34,118,97,108,117,101,34,58,34,34,125,44,123,34,102,111,114,109,97,116,34,58,34,115,116,114,105,110,103,34,44,34,105,105,100,34,58,52,44,34,112,101,114,109,115,34,58,91,34,112,114,34,93,44,34,116,121,112,101,34,58,34,50,49,34,44,34,118,97,108,117,101,34,58,34,34,125,44,123,34,102,111,114,109,97,116,34,58,34,115,116,114,105,110,103,34,44,34,105,105,100,34,58,53,44,34,112,101,114,109,115,34,58,91,34,112,114,34,93,44,34,116,121,112,101,34,58,34,50,51,34,44,34,118,97,108,117,101,34,58,34,77,121,84,101,109,112,83,101,110,115,111,114,34,125,44,123,34,102,111,114,109,97,116,34,58,34,115,116,114,105,110,103,34,44,34,105,105,100,34,58,54,44,34,112,101,114,109,115,34,58,91,34,112,114,34,93,44,34,116,121,112,101,34,58,34,51,48,34,44,34,118,97,108,117,101,34,58,34,100,101,102,97,117,108,116,34,125,44,123,34,102,111,114,109,97,116,34,58,34,115,116,114,105,110,103,34,44,34,105,105,100,34,58,55,44,34,112,101,114,109,115,34,58,91,34,112,114,34,93,44,34,116,121,112,101,34,58,34,53,50,34,44,34,118,97,108,117,101,34,58,34,34,125,93,44,34,105,105,100,34,58,49,44,34,116,121,112,101,34,58,34,51,69,34,125,44,123,34,99,104,97,114,97,99,116,101,114,105,115,116,105,99,115,34,58,91,123,34,102,111,114,109,97,116,34,58,34,102,108,111,97,116,34,44,34,105,105,100,34,58,57,44,34,109,97,120,86,97,108,117,101,34,58,49,48,48,48,44,34,109,105,110,83,116,101,112,34,58,48,46,49,44,34,109,105,110,86,97,108,117,101,34,58,45,50,55,51,46,49,44,34,112,101,114,109,115,34,58,91,34,112,114,34,44,34,101,118,34,93,44,34,116,121,112,101,34,58,34,49,49,34,44,34,117,110,105,116,34,58,34,99,101,108,115,105,117,115,34,44,34,118,97,108,117,101,34,58,48,46,48,125,93,44,34,105,105,100,34,58,56,44,34,116,121,112,101,34,58,34,56,65,34,125,93,125,93,125'".GetSpecialStrToBytes();
        Assert.True(pyBytes.CompareTwoBytes(bytes));
    }
    
    [Fact]
    public void TestGuidToHapType()
    {
        var guid = new Guid("0000003e-0000-1000-8000-0026bb765291");
        var hapType= Utils.GuidToHapType(guid);
        Assert.True(hapType=="3E");
    }
    
    [Fact]
    public void TestHapTypeToGuid()
    {
        var hapType = "00000014-0000-1000-8000-0026BB765291";
        var result = Utils.HapTypeToGuid(hapType);
        var guid = new Guid("00000014-0000-1000-8000-0026BB765291");
        Assert.True(result==guid);
    }
    
    [Fact]
    public void TestGuidToHapTypeAndHapTypeToGuid()
    {
        var guid = new Guid("0000003e-0000-1000-8000-0026bb765291");
        var hapType= Utils.GuidToHapType(guid);
        Assert.True(hapType=="3E");
        var newGuid= Utils.HapTypeToGuid(hapType);
        Assert.True(newGuid==guid);
    }
}